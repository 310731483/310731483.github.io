<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liu</title>
  
  <subtitle>记录学到的知识点和遇到的问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-30T03:26:15.586Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>liuhongxia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git打标签</title>
    <link href="http://yoursite.com/2020/04/30/%E7%94%A8%E7%9A%84git%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <id>http://yoursite.com/2020/04/30/用的git命令行/</id>
    <published>2020-04-30T02:52:23.000Z</published>
    <updated>2020-04-30T03:26:15.586Z</updated>
    
    <content type="html"><![CDATA[<p>项目的版本管理中,每当一个新版本发布时,需要做一个记录,以便以后需要的时候重新打包这个版本,这时候就用到tag这个功能.以tag v2.2.17为例</p><h6 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h6><p>打标签的操作发生在我们commit修改到本地仓库之后。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m “fixed some bugs”</span><br><span class="line">git tag -a v2.2.17 -m “Release version v2.2.17″</span><br></pre></td></tr></table></figure></p><p>git tag 是命令、<br>-a 0.1.3是增加 名为0.1.3的标签、<br>-m 后面跟着的是标签的注释</p><p>打标签的操作发生在我们commit修改到本地仓库之后。</p><h6 id="提交标签到远程服务器上"><a href="#提交标签到远程服务器上" class="headerlink" title="提交标签到远程服务器上"></a>提交标签到远程服务器上</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master --tags</span><br></pre></td></tr></table></figure><p>–tags参数表示提交所有tag至服务器端，普通的git push origin master操作不会推送标签到服务器端。</p><h6 id="切换到已有Tag"><a href="#切换到已有Tag" class="headerlink" title="切换到已有Tag"></a>切换到已有Tag</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag --list  // 查看已有tag列表</span><br><span class="line">git checkout v2.2.17  // 切换到指定tag</span><br></pre></td></tr></table></figure><h6 id="删除标签的命令"><a href="#删除标签的命令" class="headerlink" title="删除标签的命令"></a>删除标签的命令</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v2.2.17</span><br></pre></td></tr></table></figure><h6 id="删除远端服务器的标签"><a href="#删除远端服务器的标签" class="headerlink" title="删除远端服务器的标签"></a>删除远端服务器的标签</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :refs/tags/0.1.3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目的版本管理中,每当一个新版本发布时,需要做一个记录,以便以后需要的时候重新打包这个版本,这时候就用到tag这个功能.以tag v2.2.17为例&lt;/p&gt;
&lt;h6 id=&quot;提交&quot;&gt;&lt;a href=&quot;#提交&quot; class=&quot;headerlink&quot; title=&quot;提交&quot;&gt;&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小程序中使用自定义字体</title>
    <link href="http://yoursite.com/2019/08/17/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/"/>
    <id>http://yoursite.com/2019/08/17/小程序中使用自定义字体/</id>
    <published>2019-08-17T03:24:56.000Z</published>
    <updated>2019-08-17T04:05:42.300Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接：<br><a href="https://blog.csdn.net/weixin_44510465/article/details/89383928" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44510465/article/details/89383928</a><br><a href="https://www.jianshu.com/p/42da06d2f95e" target="_blank" rel="noopener">https://www.jianshu.com/p/42da06d2f95e</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考链接：&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_44510465/article/details/89383928&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/we
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js基础</title>
    <link href="http://yoursite.com/2019/03/20/titled/"/>
    <id>http://yoursite.com/2019/03/20/titled/</id>
    <published>2019-03-20T10:52:09.000Z</published>
    <updated>2019-06-12T08:22:32.806Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-cookies、session、sessionStorage、localStorage"><a href="#1-cookies、session、sessionStorage、localStorage" class="headerlink" title="1.cookies、session、sessionStorage、localStorage"></a>1.cookies、session、sessionStorage、localStorage</h3><p>cookies：存储于浏览器端的数据。可以设置 cookies 的到期时间，如果不设置时间，则在浏览器关闭窗口的时候会消失。</p><p>session：存储于服务器端的数据。session 存储特定用户会话所需的属性和配置信息。</p><h6 id="cookies-和-session-的区别在于："><a href="#cookies-和-session-的区别在于：" class="headerlink" title="cookies 和 session 的区别在于："></a>cookies 和 session 的区别在于：</h6><p>cookies 数据存放在客户的浏览器上，session 数据存放在服务器上。<br>前端都是裸君子，没有安全可言，cookies 可能会被黑客利用作数据欺骗。所以重要信息记得存 session。<br>session 如果在生效期内量过大，会占用服务器性能。<br>单个 cookies 保存的数据不能超过 4 K，很多浏览器限制一个站点保存最多 20 个 cookies。</p><p>sessionStorage：生命周期存在于标签页或窗口，用于本地存储一个会话（session）中的数据，这些数据会随着窗口或者标签页的关闭而被清空。</p><p>localStorage：生命周期是永久的，除非用户主动清除浏览器上存储的 localStorage 信息，否则它将会永久存在。</p><p>sessionStorage 和 localStorage 操作方法：setItem、getItem 以及 removeItem。</p><h6 id="以-localStorage-为例："><a href="#以-localStorage-为例：" class="headerlink" title="以 localStorage 为例："></a>以 localStorage 为例：</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">localStorage.getItem(<span class="string">'name'</span>); // 获取 name 的值</span><br><span class="line">localStorage.setItem(<span class="string">'name'</span>, <span class="string">'jsliang'</span>); // 设置 name 的值为 jsliang</span><br><span class="line">localStorage.removeItem(<span class="string">'name'</span>); // 删除 name 的值</span><br><span class="line"></span><br><span class="line">参考 1：《前端分享之cookie的使用及单点登录》</span><br><span class="line">参考 2：《Cookie、session和localStorage、以及sessionStorage之间的区别》</span><br></pre></td></tr></table></figure><h3 id="2-浅拷贝与深拷贝"><a href="#2-浅拷贝与深拷贝" class="headerlink" title="2.浅拷贝与深拷贝"></a>2.浅拷贝与深拷贝</h3><h6 id="什么是深拷贝？什么是浅拷贝？"><a href="#什么是深拷贝？什么是浅拷贝？" class="headerlink" title="什么是深拷贝？什么是浅拷贝？"></a>什么是深拷贝？什么是浅拷贝？</h6><p>简单来说，有两个对象 A 和 B，B = A，当你修改 A 时，B 的值也跟着发生了变化，这时候就叫浅拷贝。如果不发生变化，就叫深拷贝。</p><h6 id="为什么会出现深拷贝与浅拷贝？"><a href="#为什么会出现深拷贝与浅拷贝？" class="headerlink" title="为什么会出现深拷贝与浅拷贝？"></a>为什么会出现深拷贝与浅拷贝？</h6><p>首先我们需要知道基本数据类型（number、string、boolean、null、undefined）与引用数据类型（无序对象，数据以及函数）。<br>然后在基本数据类型中，例如：let a = 1; let b = a; a = 2; console.log(b)。当我们尝试这样子写时，b 在栈内存中开辟了一个新内存，所以 b 的值不会改变，仍是 1.<br>接着在引用数据类型中，例如 let a = [1, 2, 3], b = a; a[0] = 3; console.log(b)。当我们尝试这样子写时，b 会偷懒，引用跟 a 同一块的内存地址，从而 a 的修改会影响 b，使得 b 变成 [3, 1, 3]。<br>最后，我们可以知道在引用数据类型中，会产生浅拷贝的问题。</p><h6 id="如何实现深拷贝？"><a href="#如何实现深拷贝？" class="headerlink" title="如何实现深拷贝？"></a>如何实现深拷贝？</h6><p>首先我们尝试使用递归去解决深拷贝：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> deepClone(obj) &#123;</span><br><span class="line">  <span class="built_in">let</span> objClone = Array.isArray(obj) ? [] : &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span>(obj &amp;&amp; typeof obj === <span class="string">"object"</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span>(obj.hasOwnProperty(key)) &#123;</span><br><span class="line">        // 判断 obj 子元素是否为对象，如果是，递归复制</span><br><span class="line">        <span class="keyword">if</span>(obj[key] &amp;&amp; typeof obj[key] === <span class="string">"object"</span>) &#123;</span><br><span class="line">          objClone[key] = deepClone(obj[key]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          // 如果不是，简单复制</span><br><span class="line">          objClone[key] = obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> objClone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> a = [1, 2, 3, 4];</span><br><span class="line"><span class="built_in">let</span> b = deepClone(a);</span><br><span class="line">a[0] = 2;</span><br><span class="line">console.log(a, b);</span><br><span class="line"></span><br><span class="line">// Console</span><br><span class="line">// a = [2, 2, 3, 4];</span><br><span class="line">// b = [1, 2, 3, 4];</span><br></pre></td></tr></table></figure></p><h3 id="3-HTTP-状态码"><a href="#3-HTTP-状态码" class="headerlink" title="3.HTTP 状态码"></a>3.HTTP 状态码</h3><p>首先，我们大致区分下状态码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1**开头 - 信息提示</span><br><span class="line"></span><br><span class="line">2**开头 - 请求成功</span><br><span class="line"></span><br><span class="line">3**开头 - 请求被重定向</span><br><span class="line"></span><br><span class="line">4**开头 - 请求错误</span><br><span class="line"></span><br><span class="line">5**开头 - 服务器错误</span><br></pre></td></tr></table></figure></p><p><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-cookies、session、sessionStorage、localStorage&quot;&gt;&lt;a href=&quot;#1-cookies、session、sessionStorage、localStorage&quot; class=&quot;headerlink&quot; title=&quot;1.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css查漏补缺</title>
    <link href="http://yoursite.com/2018/10/31/ss%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    <id>http://yoursite.com/2018/10/31/ss查漏补缺/</id>
    <published>2018-10-31T09:07:55.000Z</published>
    <updated>2019-03-20T11:15:55.088Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-怎么让一个不定宽高的-DIV，垂直水平居中"><a href="#1-怎么让一个不定宽高的-DIV，垂直水平居中" class="headerlink" title="1.怎么让一个不定宽高的 DIV，垂直水平居中?"></a>1.怎么让一个不定宽高的 DIV，垂直水平居中?</h3><h6 id="使用Flex"><a href="#使用Flex" class="headerlink" title="使用Flex"></a>使用Flex</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">只需要在父盒子设置：display: flex;</span><br><span class="line">justify-content:center;</span><br><span class="line">                    align-items: center;</span><br><span class="line">``` </span><br><span class="line"><span class="comment">###### 使用 CSS3 transform</span></span><br><span class="line">``` bash</span><br><span class="line">父盒子设置: display:relative</span><br><span class="line">Div   设置: transform: translate(-50%，-50%);</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50%;</span><br><span class="line">            left: 50%;</span><br><span class="line">``` </span><br><span class="line"><span class="comment">###### 使用 display:table-cell 方法</span></span><br><span class="line">``` bash</span><br><span class="line">父盒子设置:display:table-cell;</span><br><span class="line">           text-align:center;</span><br><span class="line">           vertical-align:middle;</span><br><span class="line">Div   设置:display:inline-block;</span><br><span class="line">           vertical-align:middle;</span><br></pre></td></tr></table></figure><h3 id="2-position-几个属性的作用"><a href="#2-position-几个属性的作用" class="headerlink" title="2.position 几个属性的作用"></a>2.position 几个属性的作用</h3><p>position 的常见四个属性值: relative，absolute，fixed，static。一般都要配合”left”、”top”、”right” 以及 “bottom” 属性使用。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static:默认位置。</span><br><span class="line">在一般情况下，我们不需要特别的去声明它，但有时候遇到继承的情况，我们不愿意见到元素所继承的属性影响本身，从而可以用Position:static取消继承，即还原元素定位的默认值。设置为 static 的元素，它始终会处于页面流给予的位置(static 元素会忽略任何 top、 bottom、left 或 right 声明)。一般不常用。</span><br><span class="line">relative:相对定位。</span><br><span class="line">相对定位是相对于元素默认的位置的定位，它偏移的 top，right，bottom，left 的值都以它原来的位置为基准偏移，而不管其他元素会怎么 样。注意 relative 移动后的元素在原来的位置仍占据空间。</span><br><span class="line">absolute:绝对定位。 </span><br><span class="line">设置为 absolute 的元素，如果它的 父容器设置了 position 属性，并且 position 的属性值为 absolute 或者 relative，那么就会依据父容器进行偏移。如果其父容器没有设置 position 属性，那么偏移是以 body 为依据。注意设置 absolute 属性的元素在标准流中不占位置。</span><br><span class="line">fixed:固定定位。</span><br><span class="line">位置被设置为 fixed 的元素，可定位于相对于浏览器窗口的指定坐标。不论窗口滚动与否，元素都会留在那个位置。它始终是以 body 为依据的。 注意设置 fixed 属性的元素在标准流中不占位置。</span><br></pre></td></tr></table></figure></p><h3 id="3-px，em，rem-的区别"><a href="#3-px，em，rem-的区别" class="headerlink" title="3.px，em，rem 的区别"></a>3.px，em，rem 的区别</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">px 像素(Pixel)。绝对单位。像素 px 是相对于显示器屏幕分辨率而言的，是一个虚拟长度单位，是计算 机系统的数字化图像长度单位，如果 px 要换算成物理长度，需要指定精度 DPI。</span><br><span class="line"></span><br><span class="line">em 是相对长度单位，相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置， 则相对于浏览器的默认字体尺寸。它会继承父级元素的字体大小，因此并不是一个固定的值。</span><br><span class="line"></span><br><span class="line">rem 是 CSS3 新增的一个相对单位(root em，根 em)，使用 rem 为元素设定字体大小时，仍然是相对大小， 但相对的只是 HTML 根元素</span><br></pre></td></tr></table></figure><h3 id="4-CSS-选择器"><a href="#4-CSS-选择器" class="headerlink" title="4.CSS 选择器"></a>4.CSS 选择器</h3><p>选择器是匹配元素的一种模式。</p><h6 id="4-1-关于-CSS-解析器："><a href="#4-1-关于-CSS-解析器：" class="headerlink" title="4-1.关于 CSS 解析器："></a>4-1.关于 CSS 解析器：</h6><p>HTML 经过解析生成 DOM Tree；而在 CSS 解析完毕后，需要将解析的结果与 DOM Tree 的内容一起进行分析建立一棵 Render Tree，最终用来进行绘图。<br>Render Tree 中的元素与 DOM 元素相对应，但非一一对应：一个 DOM 元素可能会对应多个 renderer，如文本折行后，不同的「行」会成为 render tree 种不同的 renderer。也有的 DOM 元素被 Render Tree 完全无视，比如 display:none 的元素。<br>在建立 Render Tree 时，浏览器就要为每个 DOM Tree 中的元素根据 CSS 的解析结果来确定生成怎样的 renderer。对于每个 DOM 元素，必须在所有 Style Rules 中找到符合的 selector 并将对应的规则进行合并。选择器的「解析」实际是在这里执行的，在遍历 DOM Tree 时，从 Style Rules 中去寻找对应的 selector。</p><h6 id="4-2-CSS-解析顺序"><a href="#4-2-CSS-解析顺序" class="headerlink" title="4-2.CSS 解析顺序"></a>4-2.CSS 解析顺序</h6><p>在 CSS 的选择器中，它会按照优先级 从右向左解析，因为这样匹配元素的时候，能尽量少地查找，所以选择器最好写地简洁一点。</p><h6 id="4-3-CSS-常用选择器"><a href="#4-3-CSS-常用选择器" class="headerlink" title="4-3.CSS 常用选择器"></a>4-3.CSS 常用选择器</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">通配符：*</span><br><span class="line">ID 选择器：<span class="comment">#ID</span></span><br><span class="line">类选择器：.class</span><br><span class="line">元素选择器：p、a 等……</span><br><span class="line">后代选择器：p span、div a 等……</span><br><span class="line">伪类选择器：a:hover 等……</span><br><span class="line">属性选择器：input[<span class="built_in">type</span>=<span class="string">"text"</span>] 等……</span><br><span class="line">子元素选择器：li:firth-child、p:nth-child(1) 等……</span><br></pre></td></tr></table></figure><h6 id="4-4-CSS-选择器权重"><a href="#4-4-CSS-选择器权重" class="headerlink" title="4-4.CSS 选择器权重"></a>4-4.CSS 选择器权重</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!important -&gt; 行内样式 -&gt; <span class="comment">#id -&gt; .class -&gt; 元素和伪元素 -&gt; * -&gt; 继承 -&gt; 默认</span></span><br></pre></td></tr></table></figure><h3 id="CSS-vertical-align-属性"><a href="#CSS-vertical-align-属性" class="headerlink" title="CSS vertical-align 属性"></a>CSS vertical-align 属性</h3><p>属性设置元素的垂直对齐方式。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">baseline默认。元素放置在父元素的基线上。</span><br><span class="line">sub      垂直对齐文本的下标。</span><br><span class="line">super   垂直对齐文本的上标</span><br><span class="line">top      把元素的顶端与行中最高元素的顶端对齐</span><br><span class="line">text-top把元素的顶端与父元素字体的顶端对齐</span><br><span class="line">middle   把此元素放置在父元素的中部。</span><br><span class="line">bottom   把元素的顶端与行中最低的元素的顶端对齐。</span><br><span class="line">text-bottom把元素的底端与父元素字体的底端对齐。</span><br><span class="line">length </span><br><span class="line">%      使用 <span class="string">"line-height"</span> 属性的百分比值来排列此元素。允许使用负值。</span><br><span class="line">inherit   规定应该从父元素继承 vertical-align 属性的值。</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-怎么让一个不定宽高的-DIV，垂直水平居中&quot;&gt;&lt;a href=&quot;#1-怎么让一个不定宽高的-DIV，垂直水平居中&quot; class=&quot;headerlink&quot; title=&quot;1.怎么让一个不定宽高的 DIV，垂直水平居中?&quot;&gt;&lt;/a&gt;1.怎么让一个不定宽高的 DIV
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>管理HEXO——hexo-admin</title>
    <link href="http://yoursite.com/2018/10/31/%E7%AE%A1%E7%90%86HEXO%E2%80%94%E2%80%94hexo-admin/"/>
    <id>http://yoursite.com/2018/10/31/管理HEXO——hexo-admin/</id>
    <published>2018-10-31T06:04:32.000Z</published>
    <updated>2018-10-31T08:39:17.220Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">官网：https://jaredforsyth.com/hexo-admin/</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>一般到这里你应该是已经初始化自己的博客了，如果还没有的话，请看下面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> yourblog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="安装hexo-admin"><a href="#安装hexo-admin" class="headerlink" title="安装hexo-admin"></a>安装hexo-admin</h3><p>安装hexo-admin插件，并且启动hexo服务，打开浏览器访问能看到基本的界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-admin</span><br><span class="line">$ hexo server -d</span><br><span class="line">$ open http://localhost:4000/admin/</span><br></pre></td></tr></table></figure><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>1 主页配置文件_config.yml 里的post_asset_folder:设置为true</p><p>2 hexo目录下执行这样一句话【npm install hexo-asset-image –save】，这是下载安装一个可以上传本地图片的插件，来自dalao：dalao的git</p><p>3 运行【hexo n “xxxx”】来生成md博文时，/source/_posts文件夹内除了xxx.md文件还有一个同名的文件夹用来存放需要引入的图片，在xxx.md中用以下格式引入</p><p>4 最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![你想输入的替代文字](xxxx/图片名.jpg)</span><br></pre></td></tr></table></figure><p><img src="/2018/10/31/管理HEXO——hexo-admin/20170226154126642.jpg" alt="图片"></p><p>注意： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。</p><p>5 最后检查一下，hexo g生成页面后，进入public\2017\02\26\index.html文件中查看相关字段，可以发现，html标签内的语句是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"2017/02/26/xxxx/图片名.jpg"</span>&gt;</span><br></pre></td></tr></table></figure><p>而不是&lt;img src=”xxxx/图片名.jpg&gt;。这很重要，关乎你的网页是否可以真正加载你想插入的图片。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">更多：https://www.cnblogs.com/xingyunblog/p/8681205.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>换电脑之后如何更新hexo</title>
    <link href="http://yoursite.com/2018/10/31/%E8%84%91%E4%B9%8B%E5%90%8E%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0hexo/"/>
    <id>http://yoursite.com/2018/10/31/脑之后如何更新hexo/</id>
    <published>2018-10-31T04:56:38.000Z</published>
    <updated>2020-04-30T02:53:18.207Z</updated>
    
    <content type="html"><![CDATA[<h4 id="配置hexo环境："><a href="#配置hexo环境：" class="headerlink" title="配置hexo环境："></a>配置hexo环境：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hexo官网：https://hexo.io/zh-cn/docs/</span><br><span class="line">[安装Node.js](https://nodejs.org/en/)</span><br></pre></td></tr></table></figure><h4 id="拷贝到新电脑上"><a href="#拷贝到新电脑上" class="headerlink" title="拷贝到新电脑上"></a>拷贝到新电脑上</h4><p>将你原来电脑上已经配置好并生成的hexo目录拷到你的新电脑上，注意无需拷全部，只拷如下几个目录,将这些目录放到一个目录下，如：hexo／</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds/</span><br><span class="line"><span class="built_in">source</span>/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure><h4 id="安装hexo："><a href="#安装hexo：" class="headerlink" title="安装hexo："></a>安装hexo：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><p>安装好之后，进入hexo／目录，安装以下模块：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ npm install hexo-generator-feed --save</span><br><span class="line">$ npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate  || hexo g </span><br><span class="line">$ hexo server   || hexo s </span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h4 id="常用维护管理命令"><a href="#常用维护管理命令" class="headerlink" title="常用维护管理命令"></a>常用维护管理命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   // 清理缓存</span><br><span class="line">hexo generate // 重新生成静态文件</span><br><span class="line">hexo server -d //启动本地服务器，默认情况下，打开http://localhost:4000/</span><br><span class="line">hexo deploy  //部署到服务器</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;配置hexo环境：&quot;&gt;&lt;a href=&quot;#配置hexo环境：&quot; class=&quot;headerlink&quot; title=&quot;配置hexo环境：&quot;&gt;&lt;/a&gt;配置hexo环境：&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
  </entry>
  
</feed>
